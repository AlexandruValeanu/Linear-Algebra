#include <iostream>
#include <cmath>
#include <cstring>
#include <cassert>

using namespace std;

constexpr int MAX_N = 1000;

void LUP_decomposition(double A[][MAX_N], int P[], const int &N)
{
    for (int i = 0; i < N; ++i)
        P[i] = i;

    for (int k = 0; k < N; ++k)
    {
        double pivot = 0;
        int k_pivot = -1;

        for (int i = k; i < N; ++i)
            if (abs(A[i][k]) > pivot)
            {
                pivot = abs(A[i][k]);
                k_pivot = i;
            }

        if (k_pivot == -1)
            throw "A is a singular matrix\n";

        if (k_pivot != k)
        {
            swap(P[k], P[k_pivot]);

            for (int i = 0; i < N; ++i)
                swap(A[k][i], A[k_pivot][i]);
        }

        for (int i = k + 1; i < N; ++i)
        {
            A[i][k] = A[i][k] / A[k][k];

            for (int j = k + 1; j < N; ++j)
                A[i][j] = A[i][j] - A[i][k] * A[k][j];
        }
    }
}

double L[MAX_N][MAX_N], U[MAX_N][MAX_N], P[MAX_N][MAX_N];

void compute_PLU(double A[][MAX_N], const int &N)
{
    int perm[MAX_N];
    LUP_decomposition(A, perm, N);

    memset(P, 0, sizeof P);
    memset(L, 0, sizeof L);
    memset(U, 0, sizeof U);

    for (int i = 0; i < N; ++i)
        P[i][ perm[i] ] = 1;

    for (int i = 0; i < N; ++i)
    {
        for (int j = 0; j < i; ++j)
            L[i][j] = A[i][j];

        L[i][i] = 1;
    }

    for (int i = 0; i < N; ++i)
        for (int j = i; j < N; ++j)
            U[i][j] = A[i][j];

    /// P * A == L * U
    /// A == transpose(P) * L * U
}

int main()
{
    return 0;
}
